//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model
{
    using System;
    using System.Text;
    using System.Collections.Generic;
    
    public partial class OrderLine
    {
        public int units { get; set; }
        public decimal price { get; set; }
        public long orderId { get; set; }
        public long productId { get; set; }
    
        
        /// <summary>
        /// Relationship Name (Foreign Key in ER-Model): FK__OrderLine__order__38996AB5
        /// </summary>
        public virtual Order Order { get; set; }
        
        /// <summary>
        /// Relationship Name (Foreign Key in ER-Model): FK__OrderLine__produ__398D8EEE
        /// </summary>
        public virtual Product Product { get; set; }
    
    	/// <summary>
    	/// A hash code for this instance, suitable for use in hashing algorithms and data structures 
    	/// like a hash table. It uses the Josh Bloch implementation from "Effective Java"
        /// Primary key of entity is not included in the hash calculation to avoid errors
    	/// with Entity Framework creation of key values.
    	/// </summary>
    	/// <returns>
    	/// Returns a hash code for this instance.
    	/// </returns>
    	public override int GetHashCode()
    	{
    	    unchecked
    	    {
    			int multiplier = 31;
    			int hash = GetType().GetHashCode();
    
    			hash = hash * multiplier + units.GetHashCode();
    			hash = hash * multiplier + price.GetHashCode();
    
    			return hash;
    	    }
    
    	}
        
        /// <summary>
        /// Compare this object against another instance using a value approach (field-by-field) 
        /// </summary>
        /// <remarks>See http://www.loganfranken.com/blog/687/overriding-equals-in-c-part-1/ for detailed info </remarks>
    	public override bool Equals(object obj)
    	{
    
            if (ReferenceEquals(null, obj)) return false;        // Is Null?
            if (ReferenceEquals(this, obj)) return true;         // Is same object? 
    
            OrderLine target = obj as OrderLine;
    
    		return true
               &&  (this.units == target.units )       
               &&  (this.price == target.price )       
               &&  (this.orderId == target.orderId )       
               &&  (this.productId == target.productId )       
               ;
    
        }
    
    
    	public static bool operator ==(OrderLine  objA, OrderLine  objB)
        {
            // Check if the objets are the same OrderLine entity
            if(Object.ReferenceEquals(objA, objB))
                return true;
      
            return objA.Equals(objB);
    }
    
    
    	public static bool operator !=(OrderLine  objA, OrderLine  objB)
        {
            return !(objA == objB);
        }
    
    
        /// <summary>
        /// Returns a <see cref="T:System.String"></see> that represents the 
        /// current <see cref="T:System.Object"></see>.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.String"></see> that represents the current 
        /// <see cref="T:System.Object"></see>.
        /// </returns>
    	public override String ToString()
    	{
    	    StringBuilder strOrderLine = new StringBuilder();
    
    		strOrderLine.Append("[ ");
           strOrderLine.Append(" units = " + units + " | " );       
           strOrderLine.Append(" price = " + price + " | " );       
           strOrderLine.Append(" orderId = " + orderId + " | " );       
           strOrderLine.Append(" productId = " + productId + " | " );       
            strOrderLine.Append("] ");    
    
    		return strOrderLine.ToString();
        }
    
    
    }
}
