//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model
{
    using System;
    using System.Text;
    using System.Collections.Generic;
    
    public partial class BankCard
    {
        public BankCard()
        {
            this.Order = new HashSet<Order>();
        }
    
        public long cardId { get; set; }
        public byte type { get; set; }
        public string number { get; set; }
        public string cvv { get; set; }
        public System.DateTime expirationDate { get; set; }
        public bool isDefault { get; set; }
        public long userId { get; set; }
        public bool isActive { get; set; }
    
        
        /// <summary>
        /// Relationship Name (Foreign Key in ER-Model): FK__BankCard__userId__31EC6D26
        /// </summary>
        public virtual User User { get; set; }
        
        /// <summary>
        /// Relationship Name (Foreign Key in ER-Model): FK__Order__cardId__34C8D9D1
        /// </summary>
        public virtual ICollection<Order> Order { get; set; }
    
    	/// <summary>
    	/// A hash code for this instance, suitable for use in hashing algorithms and data structures 
    	/// like a hash table. It uses the Josh Bloch implementation from "Effective Java"
        /// Primary key of entity is not included in the hash calculation to avoid errors
    	/// with Entity Framework creation of key values.
    	/// </summary>
    	/// <returns>
    	/// Returns a hash code for this instance.
    	/// </returns>
    	public override int GetHashCode()
    	{
    	    unchecked
    	    {
    			int multiplier = 31;
    			int hash = GetType().GetHashCode();
    
    			hash = hash * multiplier + type.GetHashCode();
    			hash = hash * multiplier + (number == null ? 0 : number.GetHashCode());
    			hash = hash * multiplier + (cvv == null ? 0 : cvv.GetHashCode());
    			hash = hash * multiplier + expirationDate.GetHashCode();
    			hash = hash * multiplier + isDefault.GetHashCode();
    			hash = hash * multiplier + userId.GetHashCode();
    			hash = hash * multiplier + isActive.GetHashCode();
    
    			return hash;
    	    }
    
    	}
        
        /// <summary>
        /// Compare this object against another instance using a value approach (field-by-field) 
        /// </summary>
        /// <remarks>See http://www.loganfranken.com/blog/687/overriding-equals-in-c-part-1/ for detailed info </remarks>
    	public override bool Equals(object obj)
    	{
    
            if (ReferenceEquals(null, obj)) return false;        // Is Null?
            if (ReferenceEquals(this, obj)) return true;         // Is same object? 
    
            BankCard target = obj as BankCard;
    
    		return true
               &&  (this.cardId == target.cardId )       
               &&  (this.type == target.type )       
               &&  (this.number == target.number )       
               &&  (this.cvv == target.cvv )       
               &&  (this.expirationDate == target.expirationDate )       
               &&  (this.isDefault == target.isDefault )       
               &&  (this.userId == target.userId )       
               &&  (this.isActive == target.isActive )       
               ;
    
        }
    
    
    	public static bool operator ==(BankCard  objA, BankCard  objB)
        {
            // Check if the objets are the same BankCard entity
            if(Object.ReferenceEquals(objA, objB))
                return true;
      
            return objA.Equals(objB);
    }
    
    
    	public static bool operator !=(BankCard  objA, BankCard  objB)
        {
            return !(objA == objB);
        }
    
    
        /// <summary>
        /// Returns a <see cref="T:System.String"></see> that represents the 
        /// current <see cref="T:System.Object"></see>.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.String"></see> that represents the current 
        /// <see cref="T:System.Object"></see>.
        /// </returns>
    	public override String ToString()
    	{
    	    StringBuilder strBankCard = new StringBuilder();
    
    		strBankCard.Append("[ ");
           strBankCard.Append(" cardId = " + cardId + " | " );       
           strBankCard.Append(" type = " + type + " | " );       
           strBankCard.Append(" number = " + number + " | " );       
           strBankCard.Append(" cvv = " + cvv + " | " );       
           strBankCard.Append(" expirationDate = " + expirationDate + " | " );       
           strBankCard.Append(" isDefault = " + isDefault + " | " );       
           strBankCard.Append(" userId = " + userId + " | " );       
           strBankCard.Append(" isActive = " + isActive + " | " );       
            strBankCard.Append("] ");    
    
    		return strBankCard.ToString();
        }
    
    
    }
}
